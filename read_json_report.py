'''Read Plan Report Jason File'''

# %%
from pathlib import Path
import re
import json
import argparse
from typing import Any, Dict

import pandas as pd
import xlwings as xw

def clean_jason_text(json_text: str)->str:
    '''Remove formatting issues from Json report output.

    - Fix backslash issue related to domain/username text.
    - Remove extra marks from beginning and end of field names.
    - Remove commas following the last object in a group.

    Args:
        json_text (str): Json text generated by Eclipse reports

    Returns:
        str: The supplied Json text with repaired formatting.
    '''
    # clean `\` from user id
    # Convert: `"UserId": "hc\gsalomon"`
    # To: `"UserId": "hc\\gsalomon"`
    json_text = json_text.replace('hc\\', 'hc\\\\')

    # Remove extra marks from field names
    # Convert: `"• KV ANT •"`
    # To: `"• KV ANT •"`
    json_text = re.sub(r'\s*•\s*', '', json_text)

    # Some variables may return blanks.  Need to strip commas in those cases.
    # Remove commas that are followed by a closing brace (} or ])
    json_text = re.sub(r',(\s*[}\]])', r'\1', json_text)
    return json_text


def read_file(json_file: Path)->Dict[str, Any]:
    '''Read and parse JSON plan report file.

    Args:
        json_file (Path): Path to the Json file to read.

    Returns:
        Dict[str, Any]: Results of parsing the Json file
    '''
    json_text = json_file.read_text(encoding='utf_8_sig')
    json_text = clean_jason_text(json_text)

    plan_data = json.loads(json_text)
    return plan_data

def extract_tables(plan_data: Dict[str, Any], output_file: Path)->xw.Book:
    '''Extract plan information and place in tables.

    Args:
        plan_data (Dict[str, Any]): Data extracted from the Json report file.
        output_file (Path): Spreadsheet where the tables will be saved.

    Returns:
        xw.Book: Workbook containing the data
    '''
    def get_fields(plan_data):
        '''Return field information from plan data.'''
        for fld in plan_data['Fields']:
            if fld:
                yield fld['Field']

    wb = xw.Book()
    wb.save(output_file)

    # Extract Structure information
    structure_info = pd.DataFrame(plan_data["STRUCTURE SET"]["Structures"])
    sheet = wb.sheets.add('Structures')
    xw.view(structure_info, sheet)

    # Extract Structure Dose information
    structure_dose = pd.DataFrame(plan_data["DVH"]["DVHSummaryRows"])
    sheet = wb.sheets.add('Structure Dose')
    xw.view(structure_dose, sheet)

    # Extract Plan information
    plan_info = plan_data['PLAN']
    plan_info.update(plan_data['IMAGE'])
    plan_info.update(plan_data['HYPERARC'])
    plan_info.update(plan_data['EXTERNAL BEAM PLAN'])
    sheet = wb.sheets.add('Plan Info')
    xw.view(plan_info, sheet)

    # Extract Field information
    field_info = pd.DataFrame([fld for fld in get_fields(plan_data)]).T
    sheet = wb.sheets.add('Field Info')
    xw.view(field_info, sheet)

    # List all info sections
    plan_info_sections = list(plan_data.keys())
    sheet = wb.sheets.add('Additional sections')
    sheet.range('A1').value = 'Plan Sections'
    sheet.range('A2').options(transpose=True).value = plan_info_sections

    field_sections = list(plan_data["Fields"][0].keys())
    sheet.range('C1').value = 'Plan Sections'
    sheet.range('C2').options(transpose=True).value = field_sections


def main():
    '''Parse a '''
    parser = argparse.ArgumentParser()
    parser.add_argument("json_file", help="The Json Report file")
    parser.add_argument("-o", "--output",
                        help="The spreadsheet to save the extracted tables.")
    args = parser.parse_args()
    json_file = Path(args.json_file)
    if not json_file.exists:
        raise FileNotFoundError('The Json Report file %s does not exist',
                                 str(json_file))
    if args.output:
        output_file = Path(args.output)
    else:
        base_path = json_file.parent
        output_file = base_path / 'plan_info.xlsx'
    plan_data = read_file(json_file)
    extract_tables(plan_data, output_file)


base_path = Path(r'Z:\PATIENT DATA\JsonReports')

file_name = '2023-02-08 12-47-21_JsonReport_gsalomon.json'
json_file = base_path / file_name

output_tables = 'plan_info.xlsx'
output_file = base_path / output_tables

plan_data = read_file(json_file)
extract_tables(plan_data, output_file)
